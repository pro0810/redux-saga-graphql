input AddPostInput {
  title: String!
  clientMutationId: String
}

type AddPostPayload {
  viewer: Viewer
  postEdge: PostEdge
  clientMutationId: String
}

type Author implements Node {
  type: String

  # The ID of an object
  id: ID!
  email: String
  encrypted_password: String
  introduction: String
  description: String
  name: String
  image: String
  refresh_token: String
  created_at: String!
  updated_at: String!
}

# A connection to a list of items.
type AuthorConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AuthorEdge]
}

# An edge in a connection.
type AuthorEdge {
  # The item at the end of the edge
  node: Author

  # A cursor for use in pagination
  cursor: String!
}

type DetailPost {
  node: Post
  next: Post
  prev: Post
}

type Item implements Node {
  type: String

  # The ID of an object
  id: ID!
  target_type: itemstarget_typeEnumType
  target_id: Int
  sort_rank: Int
  post_id: Int
  created_at: String!
  updated_at: String!

  # Item text data
  text: ItemText

  # Item image data
  image: ItemImage

  # Item twitter data
  twitter: ItemTwitter
}

type ItemImage implements Node {
  type: String

  # The ID of an object
  id: ID!
  src: String
  caption: String
  created_at: String!
  updated_at: String!

  # Absolute src of image item
  full_src: String
}

enum itemstarget_typeEnumType {
  ItemText
  ItemImage
  ItemTwitter
}

type ItemText implements Node {
  type: String

  # The ID of an object
  id: ID!
  description: String
  created_at: String!
  updated_at: String!
}

type ItemTwitter implements Node {
  type: String

  # The ID of an object
  id: ID!
  twitter_id: String
  created_at: String!
  updated_at: String!
}

type Mutation {
  addPost(input: AddPostInput!): AddPostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  removePost(input: RemovePostInput!): RemovePostPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  type: String

  # The ID of an object
  id: ID!
  title: String
  lead_sentence: String
  accepted: Boolean
  published_at: String
  created_at: String!
  updated_at: String!

  # Tags of the post
  tags: [Tag]

  # Items of the post
  items: [Item]
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Project implements Node {
  type: String

  # The ID of an object
  id: ID!
  title: String
  description: String
  caption: String
  image: String
  source_url: String
  accepted: Boolean
  created_at: String!
  updated_at: String!
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input RemovePostInput {
  id: ID!
  clientMutationId: String
}

type RemovePostPayload {
  viewer: Viewer
  postId: ID
  clientMutationId: String
}

type Tag implements Node {
  type: String

  # The ID of an object
  id: ID!
  name: String
  created_at: String!
  updated_at: String!
}

input UpdatePostInput {
  id: ID!
  title: String!
  clientMutationId: String
}

type UpdatePostPayload {
  post: Post
  clientMutationId: String
}

# CMS Graph
type Viewer implements Node {
  # The ID of an object
  id: ID!

  # A list of posts
  posts(after: String, first: Int, before: String, last: Int, offset: Int, order: String): PostConnection

  # Latest posts
  latestPosts(limit: Int): [Post]

  # Detail post
  detailPost(id: ID!): DetailPost

  # A list of authors
  authors(after: String, first: Int, before: String, last: Int, offset: Int, order: String): AuthorConnection

  # A list of projects
  projects(after: String, first: Int, before: String, last: Int, offset: Int, order: String): ProjectConnection

  # Latest project
  latestProject: Project
}
