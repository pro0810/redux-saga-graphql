input AddPostInput {
  title: String!
  clientMutationId: String
}

type AddPostPayload {
  viewer: Viewer
  postEdge: PostEdge
  clientMutationId: String
}

type Mutation {
  addPost(input: AddPostInput!): AddPostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  removePost(input: RemovePostInput!): RemovePostPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  type: String

  # The ID of an object
  id: ID!
  title: String
  lead_sentence: String
  createdAt: String!
  updatedAt: String!
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input RemovePostInput {
  id: ID!
  clientMutationId: String
}

type RemovePostPayload {
  viewer: Viewer
  postId: ID
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  title: String!
  clientMutationId: String
}

type UpdatePostPayload {
  post: Post
  clientMutationId: String
}

# CMS Graph
type Viewer implements Node {
  # The ID of an object
  id: ID!

  # A list of posts
  posts(after: String, first: Int, before: String, last: Int, offset: Int): PostConnection
}
