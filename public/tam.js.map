{"version":3,"sources":["update.js"],"names":["updateAuthor","name","inputFields","id","type","description","introduction","avatar","social_accounts","outputFields","author","resolve","mutateAndGetPayload","request","console","log","chainer","add","updateAttributes","run"],"mappings":";;;;;;;;;;;;;;;AAAA;;AASA;;AAMA;;AACA;;AACA;;AAEA;;;;AACA;;;;;;AAEA;AACA;AACO,IAAMA,sCAAe,gDAA6B;AACvDC,QAAM,cADiD,EACjC;AACtBC,eAAa;AACXC,QAAI,EAAEC,MAAM,+CAAR,EADO;AAEXC,iBAAa,EAAED,MAAM,mDAAR,EAFF;AAGXE,kBAAc,EAAEF,MAAM,mDAAR,EAHH;AAIXH,UAAM,EAAEG,MAAM,mDAAR,EAJK;AAKXG,YAAQ,EAAEH,yBAAF,EALG,EAKsB;AACjC;AACAI,qBAAiB;AACfJ,YAAM,+DADS;AAEfC,mBAAa;AAFE;AAPN,GAF0C;AAcvDI,gBAAc;AACZC,YAAQ;AACNN,8BADM;AAENO,eAAS;AAAA,eAAUD,MAAV;AAAA;AAFH;AADI,GAdyC;AAoBvDE;AAAA,0EAAqB;AAAA,UAAQT,EAAR,SAAQA,EAAR;AAAA,UAAYE,WAAZ,SAAYA,WAAZ;AAAA,UAAyBC,YAAzB,SAAyBA,YAAzB;AAAA,UAAuCL,IAAvC,SAAuCA,IAAvC;AAAA,UAA6CM,MAA7C,SAA6CA,MAA7C;AAAA,UAAqDC,eAArD,SAAqDA,eAArD;AAAA,UAAwEK,OAAxE,SAAwEA,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AACnB,uCAAUA,OAAV;AADmB,+CAEZC,QAAQC,GAAR,CAAYZ,EAAZ,CAFY;;AAAA;AAObO,oBAPa;AAAA;AAAA,qBAmBbM,QACHC,GADG,CACCP,OAAOQ,gBAAP,CAAwB,EAACb,wBAAD,EAAcC,0BAAd,EAA4BL,UAA5B,EAAxB,CADD,EAEHgB,GAFG,CAECP,OAAOF,eAAP,CAAuBU,gBAAvB,CAAwCV,eAAxC,CAFD,EAGHW,GAHG,EAnBa;;AAAA;AAAA,+CA8BZT,MA9BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;AApBuD,CAA7B,CAArB","file":"update.js","sourceRoot":"/Users/thanhtu/MyProjects/Nodejs/reactjs/tkframework/server/data/graphql/types/mutations/author","sourcesContent":["import {\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLString,\n} from 'graphql'\n\nimport { \n  mutationWithClientMutationId, \n  offsetToCursor,\n  fromGlobalId,\n} from 'graphql-relay'\n\nimport { socialAccountInputType } from 'data/graphql/types/inputs/social-account'\nimport { fileInputType } from 'data/graphql/types/inputs/file'\nimport { authorType } from 'data/graphql/types/queries/author'\n\nimport models from 'models'\nimport authorize from 'data/graphql/authorize'\n\n// resolve can return async function, it is Promise\n// and in async function, we can use await instead of then callback\nexport const updateAuthor = mutationWithClientMutationId({\n  name: 'UpdateAuthor', // PayLoad will be append at the end of name\n  inputFields: {   \n    id: { type: new GraphQLNonNull(GraphQLID) },\n    description: { type: new GraphQLNonNull(GraphQLString) },\n    introduction: { type: new GraphQLNonNull(GraphQLString) },\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    avatar: { type: fileInputType }, // update if there is file uploaded\n    // also update the social_account related to it, maybe via ORM \n    social_accounts: {\n      type: new GraphQLList(socialAccountInputType),\n      description: 'List social accounts input of the user',    \n    }, \n  },\n  outputFields: {\n    author: {\n      type: authorType,\n      resolve: author => author,\n    }\n  },\n  mutateAndGetPayload: async ({id, description, introduction, name, avatar, social_accounts}, {request}) => {      \n    authorize(request)\n    return console.log(id)\n    // insert then return post, we can use try catch instead of error callback\n    const chainer = new models.DataTypes.Utils.QueryChainer()\n    const authorId = fromGlobalId(id).id    \n\n    const author = await models.authors.findById(authorId, {\n      attributes: ['id', 'image'],\n      include: [{\n        model: models.social_accounts,\n        as: 'social_accounts',\n        foreignKey: 'author_id',\n        attributes: ['id']\n      }]\n    })\n    // first, delete image of author, then upload image, \n    // should use saveSync, because we have to wait here, sync is always faster if\n    // we have to wait, try catch here or let it throw?\n    await chainer\n      .add(author.updateAttributes({description, introduction, name}))\n      .add(author.social_accounts.updateAttributes(social_accounts))\n      .run()\n\n    // error is good enough\n    // const socialAccountId = fromGlobalId(id).id\n    // models.posts.update({url}, {\n    //   where: {id: postId}\n    // })\n    // return the update to tell client it is the same\n    return author\n  },\n})\n"]}